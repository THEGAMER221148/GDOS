switch (event.key.toLowerCase()) {
            case "backspace":
                let broken = false;
                sussys.forEach((item) => {
                    console.log(storage.savedPrograms[currentProgram].lastIndexOf(item));
                    if (storage.savedPrograms[currentProgram].includes(item) && storage.savedPrograms[currentProgram].lastIndexOf(item) == storage.savedPrograms[currentProgram].length-item.length && !broken) {
                        storage.savedPrograms[currentProgram] = storage.savedPrograms[currentProgram].substring(0, storage.savedPrograms[currentProgram].length-item.length);
                        broken = true;
                    }
                });
                if(!broken){storage.savedPrograms[currentProgram] = storage.savedPrograms[currentProgram].substring(0, storage.savedPrograms[currentProgram].length-1);};
                break;
            
            case "enter":
                if(event.shiftKey){
                    storage.savedPrograms[currentProgram] += "<br>";
                }else{
                    prevLine = storage.savedPrograms[currentProgram];
                    storedString += storage.savedPrograms[currentProgram] + "<br>";
                    runGDC(storage.savedPrograms[currentProgram]);
                    storage.savedPrograms[currentProgram] = "";
                }
                break;

            case "<":
                storage.savedPrograms[currentProgram] += "&lt;";
                break;

            case ">":
                storage.savedPrograms[currentProgram] += "&gt;"
                break;

            case '"':
                storage.savedPrograms[currentProgram] += "&quot;";
                break;

            case "&":
                storage.savedPrograms[currentProgram] += "&amp;"
                break;

            case "ArrowDown":
                storage.savedPrograms[currentProgram] += "√";
                break;

            case "ArrowUp":
                storage.savedPrograms[currentProgram] = prevLine;
                break;

            case "'":
                storage.savedPrograms[currentProgram] += "&apos;";
                break;
            case "e":
                if(storage.savedPrograms[currentProgram].substring(storage.savedPrograms[currentProgram].length-3, storage.savedPrograms[currentProgram].length) == "tru"){
                    storage.savedPrograms[currentProgram] = storage.savedPrograms[currentProgram].substring(0, storage.savedPrograms[currentProgram].length-3);
                    storage.savedPrograms[currentProgram] += "⊤";
                }else if(storage.savedPrograms[currentProgram].substring(storage.savedPrograms[currentProgram].length-3, storage.savedPrograms[currentProgram].length) == "fals"){
                    storage.savedPrograms[currentProgram] = storage.savedPrograms[currentProgram].substring(0, storage.savedPrograms[currentProgram].length-3);
                    storage.savedPrograms[currentProgram] += "⊥";
                }else{
                    storage.savedPrograms[currentProgram] += event.key;
                }
                break;
            default:
                if(!forbiddenKeys.includes(event.key.toLowerCase())){
                    storage.savedPrograms[currentProgram] += event.key;
                }
                break;
        
        }
        text.innerHTML = `<span style="color:rgb(200, 200, 200)">${storedString}</span><span style="color: white">${storage.savedPrograms[currentProgram]}${indicator}</span>`;
        let splits = text.innerHTML.split("{");
        let symbols = [];
        for(let i = 0; i < splits.length; i++){
            symbols.push(splits[i].substring(0, splits[i].indexOf("}")));
            text.innerHTML = text.innerHTML.replace(`{${splits[i].substring(0, splits[i].indexOf("}"))}}`, `{}`);
        };
        symbols.splice(0, 1);
        commands.forEach((item) => {
            text.innerHTML = text.innerHTML.replaceAll(item, `<span style="color:yellow;">${item}</span>`);
        });
        operators.forEach((op) => {
            text.innerHTML = text.innerHTML.replaceAll(op, `<span style="color:green;">${op}</span>`);
        });
        splits = text.innerHTML.split("\\");
        for(let i = 0; i < splits.length; i++){
            if(i%2 != 0){
                text.innerHTML = text.innerHTML.replaceAll(`\\${splits[i]}\\`, `<span style="color:skyblue;">\\${splits[i]}\\</span>`);
            }
        };
        symbols.forEach((item) => {
            text.innerHTML = text.innerHTML.replace("{}", `<span style="color:red">{${item}}</span>`);
        });